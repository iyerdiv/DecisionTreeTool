"""Tree logging functionality"""

import os
from datetime import datetime
from pathlib import Path
from typing import Optional

from .event import Event


class TreeLogger:
    """Handles logging events to OpsBrain decision trees"""

    def __init__(self, tree_path: str):
        self.tree_path = tree_path
        self._reflections_section_exists = False  # Track section existence
        self.ensure_tree_exists()

    def ensure_tree_exists(self):
        """Create minimal tree file if it doesn't exist (optimized)"""
        if not os.path.exists(self.tree_path):
            # Create parent directory
            Path(self.tree_path).parent.mkdir(parents=True, exist_ok=True)

            # Create minimal tree structure (sections added on-demand)
            today = datetime.now().strftime("%Y-%m-%d")
            with open(self.tree_path, 'w') as f:
                f.write(f"""# OpsBrain Decision Tree - {today}
## Auto-generated by OpsBrain Watcher v2
**Started**: {datetime.now().strftime("%Y-%m-%d %H:%M:%S")}

---

## üìù Event Log

""")
        else:
            # Check if reflections section already exists (one-time check)
            with open(self.tree_path, 'r') as f:
                content = f.read()
                self._reflections_section_exists = "## üîÆ Auto-Reflections" in content

    def log_event(self, event: Event):
        """Append event to tree log (optimized for performance)"""
        log_entry = event.to_log_entry()

        try:
            # Simple append-only mode (99% I/O reduction)
            # No need to read entire file or use temp files for append operations
            with open(self.tree_path, 'a') as f:
                f.write(log_entry + '\n')

        except Exception as e:
            print(f"‚ö†Ô∏è  Error logging event: {e}")

    def add_reflection(self, reflection: str):
        """Add auto-reflection to tree (optimized append-only)"""
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        reflection_entry = f"### Auto-Reflection [{timestamp}]\n{reflection}\n\n"

        try:
            # First reflection: Create section header (one-time cost)
            if not self._reflections_section_exists:
                with open(self.tree_path, 'a') as f:
                    f.write("\n---\n\n## üîÆ Auto-Reflections\n\n")
                self._reflections_section_exists = True

            # All subsequent reflections: Pure append (zero reads)
            with open(self.tree_path, 'a') as f:
                f.write(reflection_entry)

        except Exception as e:
            print(f"‚ö†Ô∏è  Error adding reflection: {e}")
