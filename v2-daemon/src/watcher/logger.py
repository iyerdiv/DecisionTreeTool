"""Tree logging functionality"""

import os
from datetime import datetime
from pathlib import Path
from typing import Optional

from .event import Event


class TreeLogger:
    """Handles logging events to OpsBrain decision trees"""

    def __init__(self, tree_path: str):
        self.tree_path = tree_path
        self.ensure_tree_exists()

    def ensure_tree_exists(self):
        """Create tree file if it doesn't exist"""
        if not os.path.exists(self.tree_path):
            # Create parent directory
            Path(self.tree_path).parent.mkdir(parents=True, exist_ok=True)

            # Create initial tree structure
            today = datetime.now().strftime("%Y-%m-%d")
            with open(self.tree_path, 'w') as f:
                f.write(f"""# OpsBrain Decision Tree - {today}
## Auto-generated by OpsBrain Watcher v2
**Started**: {datetime.now().strftime("%Y-%m-%d %H:%M:%S")}

---

## 📋 AI Extraction Categories

### ✅ 1. Decisions Made
*Placeholder for decisions*

### 🔧 2. Actions Taken
*Placeholder for actions*

### 📄 3. Files Created/Modified
*Placeholder for file changes*

### ⚠️ 4. Issues Encountered
*Placeholder for issues*

### 💡 5. Insights & Learnings
*Placeholder for insights*

### 🔗 6. Dependencies & Requirements
*Placeholder for dependencies*

### 📋 7. TODO Items Generated
*Placeholder for todos*

### ❓ 8. Questions & Answers
*Placeholder for Q&A*

### 🧪 9. Testing & Validation
*Placeholder for testing*

### 🔍 10. Debugging Steps
*Placeholder for debugging*

---

## 📝 Event Log

""")

    def log_event(self, event: Event):
        """Append event to tree log (optimized for performance)"""
        log_entry = event.to_log_entry()

        try:
            # Simple append-only mode (99% I/O reduction)
            # No need to read entire file or use temp files for append operations
            with open(self.tree_path, 'a') as f:
                f.write(log_entry + '\n')

        except Exception as e:
            print(f"⚠️  Error logging event: {e}")

    def add_reflection(self, reflection: str):
        """Add auto-reflection to tree"""
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        reflection_entry = f"\n### Auto-Reflection [{timestamp}]\n{reflection}\n"

        temp_path = f"{self.tree_path}.tmp"

        try:
            with open(self.tree_path, 'r') as f:
                content = f.read()

            # Add reflection section if needed
            if "## 🔮 Auto-Reflections" not in content:
                content += "\n\n---\n\n## 🔮 Auto-Reflections\n"

            content += reflection_entry

            with open(temp_path, 'w') as f:
                f.write(content)

            os.replace(temp_path, self.tree_path)

        except Exception as e:
            if os.path.exists(temp_path):
                os.remove(temp_path)
            print(f"⚠️  Error adding reflection: {e}")
