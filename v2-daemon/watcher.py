#!/usr/bin/env python3
"""Decision Tree Watcher v2 - Main entry point"""

import os
import sys
import click
from pathlib import Path

# Add src to path
sys.path.insert(0, str(Path(__file__).parent / 'src'))

from watcher import __version__
from watcher.event import Event, EventStore
from watcher.logger import TreeLogger
from watcher.watcher import FileSystemWatcher
from watcher.daemon import Daemon


@click.group()
def cli():
    """Decision Tree Watcher v2 - Automatic workspace event tracking"""
    pass


@cli.command()
@click.option('--watch-path', '-w', required=True, help='Directory to watch')
@click.option('--tree-path', '-t', required=True, help='Path to decision tree file')
@click.option('--daemon', '-d', is_flag=True, help='Run as daemon')
def start(watch_path: str, tree_path: str, daemon: bool):
    """Start the file system watcher"""
    watch_path = os.path.abspath(watch_path)
    tree_path = os.path.abspath(tree_path)

    # Validate paths
    if not os.path.exists(watch_path):
        click.echo(f"Error: Watch path does not exist: {watch_path}", err=True)
        sys.exit(1)

    # Create tree file if it doesn't exist
    if not os.path.exists(tree_path):
        os.makedirs(os.path.dirname(tree_path), exist_ok=True)
        with open(tree_path, 'w') as f:
            from datetime import datetime
            f.write(f"""# Decision Tree - {datetime.now().strftime('%Y-%m-%d')}
## Auto-generated by Watcher v2
**Started**: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

---

## üìã Categories

### ‚úÖ 1. Decisions Made
*Placeholder for decisions*

### üîß 2. Actions Taken
*Placeholder for actions*

### üìÑ 3. Files Created/Modified
*Placeholder for file changes*

### ‚ö†Ô∏è 4. Issues Encountered
*Placeholder for issues*

### üí° 5. Insights & Learnings
*Placeholder for insights*

### üîó 6. Dependencies & Requirements
*Placeholder for dependencies*

### üìã 7. TODO Items Generated
*Placeholder for todos*

### ‚ùì 8. Questions & Answers
*Placeholder for Q&A*

### üß™ 9. Testing & Validation
*Placeholder for testing*

### üîç 10. Debugging Steps
*Placeholder for debugging*

---

## üìù Event Log

""")

    if daemon:
        pidfile = os.path.join(watch_path, '.watcher.pid')
        daemon_mgr = Daemon(pidfile)

        # Check if already running
        if os.path.exists(pidfile):
            with open(pidfile, 'r') as f:
                pid = int(f.read().strip())
            import signal
            try:
                os.kill(pid, 0)  # Check if process exists
                click.echo(f"Daemon already running (PID: {pid})")
                sys.exit(0)
            except OSError:
                # Stale PID file
                os.remove(pidfile)

        def run_watcher():
            watcher = FileSystemWatcher(watch_path=watch_path, tree_path=tree_path)
            watcher.start()

        daemon_mgr.start(run_watcher)
        click.echo(f"Daemon started (PID file: {pidfile})")
    else:
        click.echo(f"Starting watcher...")
        click.echo(f"  Watch: {watch_path}")
        click.echo(f"  Tree:  {tree_path}")
        click.echo(f"Press Ctrl+C to stop")
        watcher = FileSystemWatcher(watch_path=watch_path, tree_path=tree_path)
        watcher.start()


@cli.command()
@click.option('--watch-path', '-w', required=True, help='Directory being watched')
def stop(watch_path: str):
    """Stop the daemon watcher"""
    watch_path = os.path.abspath(watch_path)
    pidfile = os.path.join(watch_path, '.watcher.pid')

    daemon_mgr = Daemon(pidfile)
    daemon_mgr.stop()


@cli.command()
@click.option('--watch-path', '-w', required=True, help='Directory being watched')
def status(watch_path: str):
    """Check daemon status"""
    watch_path = os.path.abspath(watch_path)
    pidfile = os.path.join(watch_path, '.watcher.pid')

    daemon_mgr = Daemon(pidfile)
    daemon_mgr.status()


@cli.command()
def version():
    """Show version"""
    click.echo(f"Decision Tree Watcher v{__version__}")


if __name__ == '__main__':
    cli()
